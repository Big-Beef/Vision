"""
Created on Thu Mar 28 18:00:06 2019
@author: Michael Morris
DRONES IMAGE CLASSIFICATION
"""

from keras.models import Sequential
from keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img
from keras.layers import Dense
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Dropout, Flatten
import numpy as np

WIDTH = 28
HEIGHT = 28
BATCH_SIZE = 32
NUM_CLASSES = 36
EPOCHS = 30

# make training data generator
train_generator = ImageDataGenerator(
    rotation_range=180,
    width_shift_range=0.2,
    height_shift_range=0.2,
    rescale=1/255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    vertical_flip=True,
    fill_mode='nearest',
)

# get data from directory
train_data = train_generator.flow_from_directory('training_data',
    target_size=(WIDTH, HEIGHT),
    class_mode='categorical',
    shuffle=True,
    batch_size=12
)

# test data is less randomised
test_generator = ImageDataGenerator(
    rescale=1/255,
)

# get test data from same directory - I know this is bad but I don't have much data yet
test_data = train_generator.flow_from_directory('training_data',
    target_size=(WIDTH, HEIGHT),
    class_mode='categorical',
    shuffle=True,
    batch_size=12
)

# build CNN
model = Sequential()
model.add(Conv2D(
    filters=32,
    kernel_size=(3, 3),
    input_shape=(WIDTH, HEIGHT, 3),
    activation='relu'))
model.add(MaxPooling2D(
    pool_size=(2, 2)))
model.add(Flatten())  # this converts our 3D feature maps to 1D feature vectors
model.add(Dense(
    units=64,
    activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(
    units=NUM_CLASSES,
    activation='sigmoid'))
model.add(Dropout(0.5))

model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

# train
model.fit_generator(
    train_data,
    steps_per_epoch=1,
    epochs=EPOCHS,
    validation_data=test_data,
    validation_steps=1)

# classes of each output
classes = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

# get image into same form as training. It's one of the training images.
image = load_img('4.jpg', target_size=(28, 28))
image = img_to_array(image)
image = image.reshape((1, image.shape[0], image.shape[1], image.shape[2]))
image = image/255

# classify
proba = model.predict(image)[0]
idxs = np.argsort(proba)[::-1]

# print top 3 classes and their probabilities. Seems totally random
for i in idxs[:3]:
    print(classes[i], proba[i])
